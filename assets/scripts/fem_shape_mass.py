import numpy as np
from numpy.linalg import inv
'''
quadrature = np.array([
    0.162001491698524457962804490307462401688098907470703125,
    0.18385035049209774715706089409650303423404693603515625,
    0.012718366313681450652239846021984703838825225830078125,

    0.01090521221118924410919959200327866710722446441650390625,
    0.2815238021235462184677089680917561054229736328125,
    0.3621268299455338013359551041503436863422393798828125,

    0.190117002439283921955137657278100959956645965576171875,
    0.0114033294445571690978180612319192732684314250946044921875,
    0.3586207204668838688377263679285533726215362548828125,

    0.1708169251649890030275713570517837069928646087646484375,
    0.15281814309092733861206170331570319831371307373046875,
    0.63849329996172665691034353585564531385898590087890625,

    0.158685163227440584332583739524125121533870697021484375,
    0.5856628056552157790548562843468971550464630126953125,
    0.130847168952096470917467740946449339389801025390625,

    0.57122605214911514881492848871857859194278717041015625,
    0.1469183900871695869216893015618552453815937042236328125,
    0.1403728057942107143585275252917199395596981048583984375])

weight = np.array([
    0.12232200275734507466385281304610543884336948394775390625 / 6.,
    0.12806641271074692411957585136406123638153076171875  / 6.,
    0.1325680271444452384965728697352460585534572601318359375 / 6.,
    0.14062440966040323786501176073215901851654052734375 / 6.,
    0.224415166917557418191364604354021139442920684814453125 / 6.,
    0.252003980809502314830439217985258437693119049072265625 / 6.])
'''
quadrature = np.array([ 0.04049050672759042790449512949635391123592853546142578125, 0.0135607018798028812478495552795720868743956089019775390625,  0.77125473269537614395829905333812348544597625732421875, 
                        0.75250850700965499218142440440715290606021881103515625, 0.06809937093820665754417831294631469063460826873779296875, 0.09798720364927911152808093220301088877022266387939453125,
                        0.06722329489338339791881793416905566118657588958740234375, 0.0351839297735987155402170856177690438926219940185546875, 0.1563638932393952851729324038387858308851718902587890625,
                        0.419266313879513019546863006326020695269107818603515625, 0.04778143555908666295639619647772633470594882965087890625, 0.4796110110256550651541829211055301129817962646484375, 
                        0.45076587609127682920728830140433274209499359130859375, 0.059456616299433828753961961410823278129100799560546875, 0.056824017127933668103167974550160579383373260498046875, 
                        0.1294113737889104054357147788323345594108104705810546875, 0.33019041483746447429581394317210651934146881103515625, 0.00239100745743936471399138099513947963714599609375, 
                        0.12154199133392780407536548636926454491913318634033203125, 0.306493988429690278341155362795689143240451812744140625, 0.562972760143046091485530268982984125614166259765625, 
                        0.09720464458758326653509129755548201501369476318359375, 0.684390415453040024118536166497506201267242431640625, 0.111800767397383093992857538978569209575653076171875, 
                        0.029569495206479612381400556841981597244739532470703125, 0.317903560213394609235137977520935237407684326171875, 0.3232939848374789537643891890184022486209869384765625, 
                        0.432710239047768563391827001396450214087963104248046875, 0.353823239209297091267814039383665658533573150634765625, 0.10962240533194123059956837096251547336578369140625, 
                        0.2402766649280726196646895687081268988549709320068359375, 0.126801725915392016208471659410861320793628692626953125, 0.328473206722038446603306738325045444071292877197265625])

weight = np.array([
    0.03925109092483995698596999091023462824523448944091796875 / 6.,
    0.055273369155936898089453990223773871548473834991455078125 / 6.,
    0.055393798871576367670588325609060120768845081329345703125 / 6.,
    0.05993318514655952833347640762440278194844722747802734375 / 6.,
    0.06946996593763536675947278808962437324225902557373046875 / 6.,
    0.07616271524555835725767138910669018514454364776611328125 / 6.,
    0.0794266800680253071131886599687277339398860931396484375 / 6.,
    0.10646803415549009608209729549344046972692012786865234375 / 6.,
    0.11023423242849765546491624945701914839446544647216796875 / 6.,
    0.1549761160162460849054610889652394689619541168212890625 / 6.,
    0.193410812049634450726642853624070994555950164794921875 / 6.
])

def shape_p1_sym(x,y,z):
    return np.array([-1.0*(1.0*x + 0.577350269189626*y + 0.408248290463863*z - 1.0), 1.0*(1.0*x - 0.577350269189626*y - 0.408248290463863*z), 1.15470053837925*(1.0*y - 0.353553390593274*z), 1.22474487139159*z])

def shape_p1(x,y,z):
    return np.array([1 - x - y - z, x, y, z])

def shape_p2(x,y,z):
    return np.array([(x+y+z-1)*(2*x+2*y+2*z-1), x*(2*x-1), y*(2*y-1), z*(2*z-1), -4*x*(x+y+z-1), 4*x*y, -4*y*(x+y+z-1),-4*z*(x+y+z-1),4*x*z, 4*y*z])

def shape_p3(x,y,z):
    a = 0.5
    b = 9. / 2.
    c = 27.
    return np.array([
    #corner nodes
    a * (3 * (1 - x - y - z) - 1) * (3 * (1 - x - y - z) - 2) * (1 - x - y - z),    
    a * (3 * x - 1) * (3 * x - 2) * x, 
    a * (3 * y - 1) * (3 * y - 2) * y,
    a * (3 * z - 1) * (3 * z - 2) * z,

    #/mid edge nodes
    b * (1 - x - y - z) * x * (3 * (1 - x - y - z) - 1),        
    b * (1 - x - y - z) * x * (3 * x - 1),
    b * x* y* (3 * x - 1), 
    b * x* y* (3 * y - 1),
    b * (1 - x - y - z) * y * (3 * y - 1),
    b * (1 - x - y - z) * y * (3 * (1 - x - y - z) - 1),
    b * (1 - x - y - z) * z * (3 * (1 - x - y - z) - 1),
    b * (1 - x - y - z) * z * (3 * z - 1), 
    b* x* z* (3 * x - 1), 
    b * x * z * (3 * z - 1), 
    b* y* z* (3 * y - 1), 
    b * y * z * (3 * z - 1),

    #mid face nodes
    c * (1 - x - y - z) * x * z,
    c * x * y * z, 
    c * (1 - x - y - z) * y * z, 
    c * (1 - x - y - z) * x * y  
    ])

def get_mass(n, f_shape, q, w, V, rho):
    mass = np.zeros((n,n))
    for i in range(len(w)):
        x,y,z = q[i*3],q[i*3+1],q[i*3+2]
        shape = f_shape(x,y,z)
        mass += np.outer(shape, shape) * w[i] * V * rho
    return mass

def get_projection(n,m, f_shape1, f_shape2, q, w, V):
    proj = np.zeros((n,m))
    for i in range(len(w)):
        x,y,z = q[i*3],q[i*3+1],q[i*3+2]
        shape1 = f_shape1(x,y,z)
        shape2 = f_shape2(x,y,z)
        for x in range(n):
            for y in range(m):
                proj[x][y] += shape1[x] * shape2[y] * w[i] * V
    return proj

def get_prolongation(mass, projection):
    return np.matmul(inv(mass), projection)

def get_lumped(mat):
    n = len(mat[0])
    lumped = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            lumped[i,i] += mat[i,j] 
    return lumped

rho = 1
V = 1 * 6
np.set_printoptions(formatter={'float': lambda x: "{0:0.3f}".format(x)})
mass_p1_sym = get_mass(4, shape_p1_sym, quadrature, weight, V, rho)
mass_p1 = get_mass(4, shape_p1, quadrature, weight, V, rho)
mass_p2 = get_mass(10, shape_p2, quadrature, weight, V, rho)
mass_p3 = get_mass(20, shape_p3, quadrature, weight, V, rho)

proj_p1_p2 = get_projection(4,10,shape_p1, shape_p2, quadrature, weight, V)
proj_p2_p1 = get_projection(10,4,shape_p2, shape_p1, quadrature, weight, V)

proj_p2_p3 = get_projection(10,20,shape_p2, shape_p3, quadrature, weight, V)
proj_p3_p2 = get_projection(20,10,shape_p3, shape_p2, quadrature, weight, V)

I12 = get_prolongation(mass_p1, proj_p1_p2) #restriction
I21 = get_prolongation(mass_p2, proj_p2_p1) #prolongation

I23 = get_prolongation(mass_p2, proj_p2_p3) #restriction
I32 = get_prolongation(mass_p3, proj_p3_p2) #prolongation

#I = np.matmul(np.transpose(I21), np.transpose(I12))
I = np.matmul(I21, I12)
print(I21)
print(I12)
'''
v = np.random.randn(4)
print("v = ", v)
print("I = \n", I)
v = np.matmul(I21, v)
print("I21 v = \n", v)
v = np.matmul(I12, v)
print("I_12 (I21 v) = ", v)

print("\n\n Masses sum : \n")
print(np.trace(get_lumped(mass_p1)))
print(np.trace(get_lumped(mass_p2)))
print(np.trace(get_lumped(mass_p3)))
#print(d_shape_r0)
#print(d_shape_r1)
#print(d_shape_r2)'''
exit()

